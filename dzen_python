#!/usr/bin/env python
# -*- coding: utf-8 -*-
from signal import signal, alarm, SIGALRM
from subprocess import Popen,PIPE
from sys import stdin as SysStdin
from os import system
from re import sub
from config_mod import replace_p, TEXT_COLOR, BACKGROUND_COLOR, FONT, TIME_COLOR, TIME_BACKGROUND_COLOR, SCREEN_PERCENTAGE, RUN_ORDER 
import mpd_mod
import weather
import cpu
import ram
import hddtemp
import battery
import time_mod
import dmesg
import dzen_size
import statusnet
import gmail_check
import torrentflux

"""METHODS AND FUNCTIONS USED"""
def get_data(p):
  data_list=[]
  data_dict={ 'xmonad': replace_p(p),
              'cpu' : cpu.CPU,
              'ram' : ram.RAM,
              'hddtemp' : hddtemp.HDDTEMP,
              'battery' : battery.BATTERY,
              'time' : time_mod.NOW(),
              'weather':weather.WEATHER_COND , 
              'mpd_song' : mpd_mod.SONG ,
              'break_line':'\n',
              'dmesg' : dmesg.DMESG,
              'gmail' : gmail_check.UNREAD,
              'torrentflux' : torrentflux.SPEEDS,
			        'statusnet': statusnet.STATUSNET}
			
  for i in RUN_ORDER:
    data_list.append(data_dict[i])
  return '^tw()'+''.join(data_list)

def handler(signum,frame):
  return


def main():
  """INNER SPACES"""

  SPACE_PR_SYS_DATA=" |"
  SPACE_AP_TIME="\n"

  """LAUNCH DZEN"""

  proc = Popen('dzen2 -w '+dzen_size.DZEN_SIZE+' -fg '+TEXT_COLOR+' -bg '+BACKGROUND_COLOR+' -ta l -fn '+FONT, 
                          shell=True, 
                          stdin=PIPE
                          )
  (child_stdin, child_stdout) = (proc.stdin, proc.stdout)
  signal(SIGALRM,handler)
  p=""

  """MAIN LOOP"""
  weather.get_weather().start()
  hddtemp.get_hddtemp().start()
  cpu.get_cpu().start()
  ram.get_mem().start()
  battery.get_battery().start()
  mpd_mod.get_mpd().start()
  dmesg.get_dmesg().start()
  statusnet.get_statusnet().start() 
  gmail_check.gmail().start()
  torrentflux.get_tflux().start()

  while True:
    alarm(1)
    try:
      p=SysStdin.readline()
      p=p.replace('\n','')
      data=get_data(p)
      child_stdin.write(data)
      continue
    except:
      data=get_data(p)
      child_stdin.write(data)
      continue

if __name__ == "__main__":
  main()
