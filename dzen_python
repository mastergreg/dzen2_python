#!/usr/bin/python
# -*- coding: utf-8 -*-
from signal import signal, alarm, SIGALRM
from subprocess import Popen,PIPE
from sys import stdin as SysStdin
from time import strftime
from os import system
from re import sub
from config_mod import replace_p,TEXT_COLOR,BACKGROUND_COLOR,FONT,TIME_COLOR, TIME_BACKGROUND_COLOR, SCREEN_PERCENTAGE 
import mpd_mod
import weather
import cpu
import ram
import hddtemp
import battery
from colors import *
res_proc= Popen("xrandr  | grep \* | cut -d' ' -f4",shell=True,stdout=PIPE)
resolution = res_proc.stdout
[SCREEN_WIDTH,SCREEN_HEIGHT]=resolution.read().split()[0].split('x')
"""METHODS AND FUNCTIONS USED"""
CRUCIAL_WIDTH=int(SCREEN_WIDTH)/6
def get_data():
#  L=len(p)
#  if L>CRUCIAL_WIDTH:
#    NEW_LINE="\n"
#  else:
#    NEW_LINE=""
  data="^tw()" + replace_p(p) + SPACE_PR_SYS_DATA + cpu.CPU + ram.RAM + hddtemp.HDDTEMP + battery.BATTERY + NOW() + weather.WEATHER_COND+mpd_mod.SONG+SPACE_AP_TIME
  L=len_dzen(data)*FONT_SIZE
  return data
##+get_top_processes()
def NOW():
  return " "+set_colors(TIME_COLOR,TIME_BACKGROUND_COLOR)+strftime("%d-%m %H:%M")+set_normal_color()
def handler(signum,frame):
  return



def get_font_size(font):
  return (int(font.split('-')[7])/2)+1



def len_dzen(my_string):
  new_string = sub('\^.*?\)','',my_string,0)
  return len(new_string) 

FONT_SIZE=get_font_size(FONT)




"""INNER SPACES"""

SPACE_PR_SYS_DATA=" |"
SPACE_AP_TIME="\n"

"""LAUNCH DZEN"""

proc = Popen('dzen2 -w '+str(int(SCREEN_WIDTH)*float(SCREEN_PERCENTAGE))+' -fg '+TEXT_COLOR+' -bg '+BACKGROUND_COLOR+' -ta l -fn '+FONT, 
                        shell=True, 
                        stdin=PIPE
                        )
(child_stdin, child_stdout) = (proc.stdin, proc.stdout)
signal(SIGALRM,handler)


"""MAIN LOOP"""
weather.get_weather().start()
hddtemp.get_hddtemp().start()
cpu.get_cpu().start()
ram.get_mem().start()
battery.get_battery().start()
mpd_mod.get_mpd().start()
while True:
  alarm(1)
  try:
    p=SysStdin.readline()
    p=p.replace('\n','')
    data=get_data()
    child_stdin.write(data)
    continue
  except:
    data=get_data()
    child_stdin.write(data)
    continue
